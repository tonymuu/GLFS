// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v3.12.4
// source: masterserver.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MasterServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// manages chunk server information
	ChunkServers map[uint32]*ChunkServer `protobuf:"bytes,1,rep,name=ChunkServers,proto3" json:"ChunkServers,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// maps from filename to a list of chunk handles
	FileMetadata map[string]*File `protobuf:"bytes,2,rep,name=FileMetadata,proto3" json:"FileMetadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// maps from chunkhandle to chunk metadata (location, expiration, etc.)
	ChunkMetadata map[uint64]*Chunk `protobuf:"bytes,3,rep,name=ChunkMetadata,proto3" json:"ChunkMetadata,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MasterServer) Reset() {
	*x = MasterServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_masterserver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MasterServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterServer) ProtoMessage() {}

func (x *MasterServer) ProtoReflect() protoreflect.Message {
	mi := &file_masterserver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterServer.ProtoReflect.Descriptor instead.
func (*MasterServer) Descriptor() ([]byte, []int) {
	return file_masterserver_proto_rawDescGZIP(), []int{0}
}

func (x *MasterServer) GetChunkServers() map[uint32]*ChunkServer {
	if x != nil {
		return x.ChunkServers
	}
	return nil
}

func (x *MasterServer) GetFileMetadata() map[string]*File {
	if x != nil {
		return x.FileMetadata
	}
	return nil
}

func (x *MasterServer) GetChunkMetadata() map[uint64]*Chunk {
	if x != nil {
		return x.ChunkMetadata
	}
	return nil
}

type ChunkServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId          uint32 `protobuf:"varint,1,opt,name=ServerId,proto3" json:"ServerId,omitempty"`
	ServerAddress     string `protobuf:"bytes,2,opt,name=ServerAddress,proto3" json:"ServerAddress,omitempty"`
	TimeStampLastPing int64  `protobuf:"varint,3,opt,name=TimeStampLastPing,proto3" json:"TimeStampLastPing,omitempty"`
}

func (x *ChunkServer) Reset() {
	*x = ChunkServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_masterserver_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkServer) ProtoMessage() {}

func (x *ChunkServer) ProtoReflect() protoreflect.Message {
	mi := &file_masterserver_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkServer.ProtoReflect.Descriptor instead.
func (*ChunkServer) Descriptor() ([]byte, []int) {
	return file_masterserver_proto_rawDescGZIP(), []int{1}
}

func (x *ChunkServer) GetServerId() uint32 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *ChunkServer) GetServerAddress() string {
	if x != nil {
		return x.ServerAddress
	}
	return ""
}

func (x *ChunkServer) GetTimeStampLastPing() int64 {
	if x != nil {
		return x.TimeStampLastPing
	}
	return 0
}

type File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName     string   `protobuf:"bytes,1,opt,name=FileName,proto3" json:"FileName,omitempty"`
	ChunkHandles []uint64 `protobuf:"varint,2,rep,packed,name=ChunkHandles,proto3" json:"ChunkHandles,omitempty"`
	// Unix timestamp indicating the time this file should be deleted physically.
	DeletionTimeStamp int64 `protobuf:"varint,3,opt,name=DeletionTimeStamp,proto3" json:"DeletionTimeStamp,omitempty"`
}

func (x *File) Reset() {
	*x = File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_masterserver_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_masterserver_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_masterserver_proto_rawDescGZIP(), []int{2}
}

func (x *File) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *File) GetChunkHandles() []uint64 {
	if x != nil {
		return x.ChunkHandles
	}
	return nil
}

func (x *File) GetDeletionTimeStamp() int64 {
	if x != nil {
		return x.DeletionTimeStamp
	}
	return 0
}

type Chunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrimaryServerId         uint32   `protobuf:"varint,1,opt,name=PrimaryServerId,proto3" json:"PrimaryServerId,omitempty"`
	ReplicaServerIds        []uint32 `protobuf:"varint,2,rep,packed,name=ReplicaServerIds,proto3" json:"ReplicaServerIds,omitempty"`
	TimeStampLastLeaseGrant uint64   `protobuf:"varint,3,opt,name=TimeStampLastLeaseGrant,proto3" json:"TimeStampLastLeaseGrant,omitempty"`
	Version                 uint64   `protobuf:"varint,4,opt,name=Version,proto3" json:"Version,omitempty"`
}

func (x *Chunk) Reset() {
	*x = Chunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_masterserver_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chunk) ProtoMessage() {}

func (x *Chunk) ProtoReflect() protoreflect.Message {
	mi := &file_masterserver_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chunk.ProtoReflect.Descriptor instead.
func (*Chunk) Descriptor() ([]byte, []int) {
	return file_masterserver_proto_rawDescGZIP(), []int{3}
}

func (x *Chunk) GetPrimaryServerId() uint32 {
	if x != nil {
		return x.PrimaryServerId
	}
	return 0
}

func (x *Chunk) GetReplicaServerIds() []uint32 {
	if x != nil {
		return x.ReplicaServerIds
	}
	return nil
}

func (x *Chunk) GetTimeStampLastLeaseGrant() uint64 {
	if x != nil {
		return x.TimeStampLastLeaseGrant
	}
	return 0
}

func (x *Chunk) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

var File_masterserver_proto protoreflect.FileDescriptor

var file_masterserver_proto_rawDesc = []byte{
	0x0a, 0x12, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x22, 0x8f, 0x04, 0x0a, 0x0c, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x0c, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x50, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x53, 0x0a, 0x0d, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x5a, 0x0a, 0x11,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x53, 0x0a, 0x11, 0x46, 0x69, 0x6c, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x55, 0x0a,
	0x12, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x7d, 0x0a, 0x0b, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x6d, 0x70, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x4c, 0x61, 0x73, 0x74, 0x50,
	0x69, 0x6e, 0x67, 0x22, 0x74, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0c, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xb1, 0x01, 0x0a, 0x05, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x50, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x10, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x47,
	0x72, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x47, 0x72,
	0x61, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x05, 0x5a,
	0x03, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_masterserver_proto_rawDescOnce sync.Once
	file_masterserver_proto_rawDescData = file_masterserver_proto_rawDesc
)

func file_masterserver_proto_rawDescGZIP() []byte {
	file_masterserver_proto_rawDescOnce.Do(func() {
		file_masterserver_proto_rawDescData = protoimpl.X.CompressGZIP(file_masterserver_proto_rawDescData)
	})
	return file_masterserver_proto_rawDescData
}

var file_masterserver_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_masterserver_proto_goTypes = []interface{}{
	(*MasterServer)(nil), // 0: masterserver.MasterServer
	(*ChunkServer)(nil),  // 1: masterserver.ChunkServer
	(*File)(nil),         // 2: masterserver.File
	(*Chunk)(nil),        // 3: masterserver.Chunk
	nil,                  // 4: masterserver.MasterServer.ChunkServersEntry
	nil,                  // 5: masterserver.MasterServer.FileMetadataEntry
	nil,                  // 6: masterserver.MasterServer.ChunkMetadataEntry
}
var file_masterserver_proto_depIdxs = []int32{
	4, // 0: masterserver.MasterServer.ChunkServers:type_name -> masterserver.MasterServer.ChunkServersEntry
	5, // 1: masterserver.MasterServer.FileMetadata:type_name -> masterserver.MasterServer.FileMetadataEntry
	6, // 2: masterserver.MasterServer.ChunkMetadata:type_name -> masterserver.MasterServer.ChunkMetadataEntry
	1, // 3: masterserver.MasterServer.ChunkServersEntry.value:type_name -> masterserver.ChunkServer
	2, // 4: masterserver.MasterServer.FileMetadataEntry.value:type_name -> masterserver.File
	3, // 5: masterserver.MasterServer.ChunkMetadataEntry.value:type_name -> masterserver.Chunk
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_masterserver_proto_init() }
func file_masterserver_proto_init() {
	if File_masterserver_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_masterserver_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MasterServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_masterserver_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_masterserver_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_masterserver_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_masterserver_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_masterserver_proto_goTypes,
		DependencyIndexes: file_masterserver_proto_depIdxs,
		MessageInfos:      file_masterserver_proto_msgTypes,
	}.Build()
	File_masterserver_proto = out.File
	file_masterserver_proto_rawDesc = nil
	file_masterserver_proto_goTypes = nil
	file_masterserver_proto_depIdxs = nil
}
